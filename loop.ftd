-- import: ft
-- import: config

\-- ft-core.concept:

-- ft.doc-page:
toc: $ft.toc
    
-- ft.h0: `$loop$`: Looping Over Lists

`ftd` supports [`list`](list/) data type, and we can render each
element of a list using `$loop$` construct.

Consider this list:

-- ft.code:
lang: ftd

\-- list people:
type: string

\-- people: Arpita

\-- people: Asit

\-- people: Sourabh

-- ft.markdown:

Here we defined a list of type `string`, with three elements. Now say we want to
display each of them:

-- ft.code:
lang: ftd

\-- ftd.text: ref obj
$loop$: people as obj

-- ft.markdown:

Notice the `$loop$`, which tells `ftd` to invoke the component 
[`ftd.text`](text/), once for each member of our list.

We have looped over `people`, and in each instance of the loop, the current member
is called `obj`, notice the `as obj` modifier.

If no modifier is given, the name of each member of the list is `object`.

-- ft.h1: `if` with `$loop$`

We can further use `if` in the loop to only show some of the members of the list
that meet some criteria:

-- ft.code:
lang: ftd

\-- foo: ref $o.name
$loop$: employee as o
if: o.is-permanent

-- ft.markdown:

Here we are looping over a record containing `.name: string` and 
`.is-permanent: boolean` and we only want to show employee names for permanent 
employees.

-- ft.h1: Looping At Sub-Component Level

Looping is also allowed at the sub-component level:

-- ft.code:
lang: ftd

\-- ftd.column:

\--- foo: ref obj.name
$loop$: people as obj
body: ref obj.bio
