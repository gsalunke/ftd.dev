-- import: ft
-- import: config

-- ft.doc-page:
toc: $config.dev-toc

-- ft.h0: `ftd::p1`: A JSON/YML Replacement

-- ft.markdown:

`ftd::p1` represents a file format that can be used as configuration file, and many
text based documents, eg instead of markdown file used by a bunch of static site
generators, with yml "front matter", they can switch to `p1` file.

-- ft.h1: Motivation

-- ft.markdown:

JSON is particularly hard to write for humans, and while YML is slightly better,
but its still quite hard for humans.

Also for writing multiline text, YML is not greatest option.

-- ft.code:
lang: md

---
layout: post
title: Blogging Like a Hacker
---

Some **markdown** text.

-- ft.markdown:

Consider the above "markdown with front matter" file. We can instead write:

-- ft.code:
lang: ftd

\-- meta:
layout: post

\-- title: Blogging Like a Hacker

\-- markdown:

Some **markdown** text.

-- ft.markdown:

There are advantages like you can mix markdown content with other content, eg:

-- ft.code:
lang: ftd

\-- markdown:

Some **markdown** text.

\-- image: caption of the image
src: http://somedomain.com/photo.png
alt: some alt text for the image
width: 400
align: center

-- ft.markdown:

As you can see we have created a custom "section" for image, and not using the
relatively ugly and limiting `![]()` syntax.

We can extend our `image` considerably, adding a lot of headers, without worrying
about crating cryptic `![Alt text](/path/to/img.jpg "image title")`.

-- ft.h2: `ftd::p1` as configuration file

-- ft.markdown:

Compared to `ini`/`toml`/`json`/`yml`, the `p1`'s `-- section:` syntax is bit
easier, less text to write, and there is no distinction between the format people
use for writing markdown text vs other configurations, none of these formats
mentioned are used by any of the static site generators for example.

We intentionally do not support nesting as it forces you to think about what is
going on. p1 file should be designed for humans to read and write, and as little
"syntactical" stuff should be there.

-- ft.h2: File Format For Humans

-- ft.markdown:

One of the goals of `ftd::p1` is to become the file format that all humans know,
not just programmers. Humans must be able to own their data, and for non binary
data, like images etc, if some data can be captured as sane text file, it must be
captured as text file, and its not enough to give people access to those text
files, those text files must be master data as much as possible, and must be
readable/editable by humans.

One can say XML was an attempt in this direction. It failed. `ftd::p1` and
eventually `ftd` is another attempt at that.

All XML files look "alike", have common sigils, similar syntax, if you ever get
used to editing one, you feel quite comfortable in others. You just have to learn
about the xml schema. We are trying to do the same with `ftd::p1`.

-- ft.h2: Nesting Is Bad

-- ft.markdown:

One aspect we diverge from JSON/XML etc is lack of nesting. JSON etc support
arbitrary nesting, we only support two level nesting (section and sub-section,
there is no sub-sub-section etc).

This forced developers to chose section/sub-section properly, and we expect people
to use `id`s and `class`es to keep definitions flat, and use `id`/`classes` to
refer to one or more section defined elsewhere.

Keeping things flat means humans don't have to learn about nesting or indentation
rules. This means we don't refer to anonymous deeply nested DOM nodes or JSON
objects, but refer by IDs and CLASSes.

-- ft.h2: Text Vs Data

-- ft.markdown:

If you look at file formats, we have asciidoc, markdown, restructured text etc on
one hand, and json/yml/ini files on another.

One is optimised for writing prose, long text, and other for storing data. This is
an artificial divide. Every text ever written can someday become long, multiline,
and nested multiline JSON etc is just torture for humans to write.

Other is optimised for storing proper data, instead of prose. But markdown/asciidoc
cant be used for storing data. We have hybrids like "yml front matter in markdown",
but they are quite limited, they still expect only one piece of text can be
multiline and everything else must be simple "small text" or people suffer from
a very poor editing experience.

`ftd:p1` aims to allow people to write prose and store data in one place.

-- ft.h1: Grammar Of A `p1` File

-- ft.markdown:

`ftd` is a list of `sections`, each `section`:

- starts with `-- `.
- `section name`, eg if you see `-- markdown:`, this is a `section` with name
  `markdown`
- `section caption`: `sections` can optionally have captions, eg `-- h0: hello`,
  here "hello" is the `section caption`
- `section header`: this is a series of "key-value" pairs, separated by ":" and
  comes right after the section name line
  - eg "-- image:<newline>src: http://..", here "src" is the "key", and
    "http://.." is the "value".
  - `section header` ends after first empty line
- `section body`: any text that comes after `section header` till the next
  `section` or `sub-section` is the "body" of that section.
- `sub-section`: `sub-sections` look like `section`, but they start with `--- `
  instead of `-- `.
  - A `section` can have zero or more `sub-sections.
  - there is no "sub-sub-section"
  - `sub-sections` also have `sub-section name`, optional `sub-section captions`,
    optional `sub-section headers` and optional `sub-section body`.

A sample p1 file:

-- ft.code:
lang: ftd

\-- some-section: the caption of the section (optional)
section-header-1: section header value
section-header-2: any number of section header possible

optional body. note there is a single empty line to trigger end
of "header"

\--- sub-section-1: optional caption of subsection
sub-section-header: they too can have headers

optional body.

\--- sub-section-2: any number of subsections can exist

\-- some-other-section: same file can have any number of sections

-- ft.h2: `ftd::p1::Section` "AST"

-- ft.markdown:

A p1 document is serialised into a `Vec<ftd::p1::Section>`:

-- ft.code:
lang: rs

#[derive(Debug, PartialEq, Default)]
pub struct Section {
    pub name: String,
    pub caption: Option<String>,
    pub header: Header,
    pub body: Option<String>,
    pub sub_sections: SubSections,
}

#[derive(Debug, PartialEq, Default)]
pub struct SubSection {
    pub name: String,
    pub caption: Option<String>,
    pub header: Header,
    pub body: Option<String>,
}

#[derive(Debug, PartialEq, Default)]
pub struct SubSections(pub Vec<SubSection>);

#[derive(Debug, PartialEq, Default)]
pub struct Header(pub(crate) Vec<(String, String)>);

-- ft.markdown:

This is a low level AST. You should have your own types defined, and convert
`ftd::p1::Section` etc to your type and use that type in your program, instead of
directly using these types.

In future we may get `serde` like auto derives that will convert things directly to
your types.

-- ft.h2: Sample Code To Convert `ftd::p1::Section` to Custom Type

-- ft.markdown:

Say we have a type like this:

-- ft.code:
lang: rs

#[derive(PartialEq, Debug, Clone, Serialize)]
pub struct Markdown {
    pub body: crate::Rendered,
    pub caption: Option<crate::Rendered>,
    pub hard_breaks: bool,
    pub auto_links: bool,
    pub align: crate::Align,
    pub direction: crate::TextDirection,
    pub two_columns: bool,
    pub collapsed: bool,
}

-- ft.markdown:

This is how you will create `Markdown` given `ftd::p1::Section`:

-- ft.code:
lang: rs

impl Markdown {
    pub fn from_p1(p1: &crate::p1::Section)
        -> Result<Self, crate::document::ParseError> {
        let mut m = Markdown::default();
        if let Some(ref c) = p1.caption {
            m.caption = Some(crate::Rendered::line(c));
        }
        match p1.body {
            Some(ref b) => m.body = crate::Rendered::from(b),
            None => {
                return Err(crate
                    ::document
                    ::ParseError
                    ::ValidationError(
                        "body must be present for markdown"
                            .to_string()
                    )
                )
            }
        }

        m.hard_breaks = p1
            .header
            .bool_with_default("hard_breaks", m.hard_breaks)?;
        m.auto_links = p1
            .header
            .bool_with_default("auto_links", m.auto_links)?;
        m.align = p1
            .header
            .str_with_default("align", m.align.as_str())?
            .parse()?;
        m.direction = p1
            .header
            .str_with_default("direction", m.direction.as_str())?
            .parse()?;
        m.two_columns = p1
            .header
            .bool_with_default("two_columns", m.two_columns)?;
        m.collapsed = p1
            .header
            .bool_with_default("collapsed", m.collapsed)?;
        Ok(m)
    }
}

-- ft.markdown:

We are using a bunch of helpers defined on `ftd::p1::Header` eg
`.bool_with_default()` and `.str_with_default()`, which gets a `bool` or `str`
from header, or return if not found or invalid (in case of `bool`).

-- ft.h2: Convert Custom Type To `ftd::p1::Section`

-- ft.markdown:

We can convert back out type, say `Markdown` to `ftd::p1::Section`:

-- ft.code:
lang: rs

impl Markdown {
    pub fn to_p1(&self) -> crate::p1::Section {
        let mut p1 = crate::p1::Section::with_name("markdown")
            .and_optional_caption(&self.caption)
            .and_body(self.body.original.as_str());

        if self.hard_breaks {
            p1 = p1.add_header("hard_breaks", "true");
        }
        if self.two_columns {
            p1 = p1.add_header("two_columns", "true");
        }
        if self.collapsed {
            p1 = p1.add_header("collapsed", "true");
        }
        if self.auto_links {
            p1 = p1.add_header("auto_links", "true");
        }
        if self.direction != crate::TextDirection::default() {
            p1 = p1
                .add_header("direction", self.direction.as_str());
        }
        if self.align != crate::Align::default() {
            p1 = p1.add_header("align", self.align.as_str());
        }
        p1
    }
}

-- ft.markdown:

We have used some more helpers, `.add_header()` and `. and_optional_caption()` etc
to construct and populate `ftd::p1::Section` types.

-- ft.h1: The "parser"

-- ft.markdown:

The parsing is implemented by `ftd::p1::parse()`:

-- ft.code:
lang: rs

pub fn parse(s: &str) -> Result<Vec<Section>> {}

-- ft.markdown:

Where the `Result` and `Error` is:

-- ft.code:
lang: rs

use thiserror::Error as Error_;

#[derive(Error_, Debug)]
pub enum Error {
    #[error("invalid input: {message}")]
    InvalidInput { message: String, context: String },

    #[error("file was empty")]
    EmptyFile,
    #[error("key not found: {key}")]
    NotFound { key: String },
    #[error("cant parse integer")]
    CantParseInt {
        #[from]
        source: std::num::ParseIntError,
    },
    #[error("cant parse bool")]
    CantParseBool,
    #[error("cant parse float")]
    CantParseFloat {
        #[from]
        source: std::num::ParseFloatError,
    },
}

pub type Result<T> = std::result::Result<T, Error>;

-- ft.h1: Pretty Printer / Serialiser

-- ft.markdown:

If we have `Vec<ftd::p1::Section>` we can convert them back to `String` using
`ftd::p1::to_string()`:

-- ft.code:
lang: rs

pub fn to_string(p1: &[crate::p1::Section]) -> String {}

-- ft.markdown:

The returned string is "pretty printed".
