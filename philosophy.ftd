-- import: ft
-- import: config

\-- ft-core.concept:


-- ft.doc-page:
toc: $ft.toc


-- ft.h0: Philosophy Behind `ftd`

Markdown is brilliant, very soon probably every text input where humans write free
form text will be supporting markdown or a subset of it. 

But markdown fails at:

1. capturing data ([frontmatter](https://jekyllrb.com/docs/front-matter/) 
   is a cop-out, forces yml, which may not be something all humans will be able to 
   learn) and, 
2. more complex UI (in an attempt to chase simplicity, it is too simple).

On the other hand, data files like JSON/XML/ini,TOML etc are either not suitable
for writing free form text, or have too much syntax.

If the vision is for every human to own their data, one must ask, data in what 
format? XML? JSON? YML? Markdown? FTD hopes to be that format.

`ftd` is [strongly typed](data-modelling/), with a type system 
hopefully superior to many programming languages (we have 
[ADT](or-type/)!).


-- ft.h1: Simple Syntax

If our goal is for all humans to learn some syntax, it must be very simple.

With these in mind, we have a syntax that only has `-`, `:` (and `\`) as special 
characters. There is no `(`, or `[`, or `{`, or even `"` etc etc.


-- ft.h1: Indentation And Closing Tags

If our goal is to the universal data format, which can be inputted in any text
field humans come across, we can not rely on advanced editor features.

Working with indentation-based grammar is very hard if an indentation-aware editor 
is not used. You need an editor that is able to indent and un-indent blocks of 
text.

Closing tags or brackets/braces etc are even worse: they require indentation 
anyways, but they also force users to keep track of matching special characters,
which is a common stumbling block for programmers that many attempts in 
programming language world has been made to get rid of them (Python, one of the
most successful programming languages used "getting rid of closing tags/brackets"
as one of the selling points, at least in the beginning).


-- ft.h2: Hierarchal data and flat structure

This forces us to represent data and UI, both of them are inherently hierarchal 
in nature, in a flat format. This is possible to some extent, as we explore with
the design of `ftd`.

Read how we do ["container management"](container/) to attempt this.

What we are trying is very hard. We will have to make compromises somewhere.
