-- import: ft
-- import: config

\-- ft-core.concept:

-- ft.doc-page:
toc: $ft.toc

-- ft.h0: Container Management

Every `ftd` document is rendered in the context of a "main container".

-- ft.h1: `ftd.main`: the main container

`ftd` has two container components: [`ftd.column`](column/) and 
[`ftd.row`](row/). These two components can store zero or more 
components as children.

The main container for the document is an `ftd.column`. It is created when we start
rendering and is set as the "current container".

-- ft.h1: "current container"

Current container is the container where every newly initialized component is 
placed.

-- ft.code:
lang: ftd

\-- ftd.text: hello

-- ft.markdown:

So when you see a code like above, the `ftd.text` component is initialized, and
placed into the current container.

-- ft.h1: An Open Container

If a container, say `ftd.row` or `ftd.column`, is created, and it has zero 
children, it is considered an "open container"

-- ft.code:
lang: ftd

\-- ftd.row:

-- ft.markdown:

As you can see we have created an `ftd.row`, but it has zero children, so the 
row is considered "open", and when `ftd` finds an open container, it first places
it in the current container, and changes the current container to this new open 
container.

-- ft.code:
lang: ftd

\-- ftd.row:

\--- ftd.text: hello

\--- ftd.text: world

-- ft.markdown:

In this example we created a row with two children. In this case since the 
container is not empty, it is not made the current container. 

We can force a container to be open or closed by using the `open` attribute:

-- ft.code:
lang: ftd

\-- ftd.row:
open: false

\-- ftd.row:
open: true

\--- ftd.text: hello

\-- ftd.row:
open: false

-- ft.markdown:

In this example, the first row is not open, even though it has no children, 
because we set the `open` attribute to `false`. This means the next row is not 
inserted inside the first row, which would have happened had it not been a closed 
container.

The second row, on the other hand, has a child, "hello" text, and it would have 
normally been considered closed, but we kept it open using the `open` attribute,
which means the third row is placed inside the second row.

-- ft.h2: `open` can take an `id`

An open container can set the value of `open` to the `id` of one of its children,
when that is done, the `id`ed child is made the container in which all subsequent 
components will be placed:

-- ft.code:
lang: ftd

\-- component foo:
open: some-child
component: ftd.column

\--- ftd.row:
id: some-child

\--- ftd.row:

\-- foo:

\-- ftd.text: hello

-- ft.markdown:

In this case `foo` has designated the first `row` inside it as the container which
will receive children.

`hello` text will go inside the row with id: `some-child`.

-- ft.h1: `container` keywords and container id

In the last example we left a row inside another row as the current container.
Anything new will be placed inside the row-inside-the-row. If we want to get back
to the "main container", we use the container keyword:

-- ft.code:
lang: ftd

\-- container: ftd.main

-- ft.markdown:

Note that the main container created for the document is called `ftd.main`. This
sentence also means the main container has an id: `ftd.main`. Actually the `id`
is `main`, but since that container is part of `ftd` namespace, its full id is
`ftd.main`.

Any container can specify an id, and then we can use that id to insert more 
children in it:

-- ft.code:
lang: ftd

\-- ftd.row:
open: false
id: first-row

\-- ftd.row:
open: true
id: second-row

\--- ftd.text: hello

\-- container: first-row

\-- ftd.text: this goes as the first child of the first row

\-- container: second-row

\-- ftd.text: this is the second child of the second row

-- ft.h1: "sub-component container management"

When defining a component based on a container component, we can do the container
management inside the definition as well. 

In that case the id `ftd.main` points to the container belonging to the component
being defined.

-- ft.code:
lang: ftd

\-- component foo:
component: ftd.row

\--- ftd.row:
id: first-in-foo

\--- container: ftd.main

\--- ftd.text: second child of the outer ftd row

\--- container: first-in-foo

\--- ftd.text: first child of `first-in-foo` row

-- ft.markdown:

The IDs inside the component, eg `first-in-foo` here, are not accessible outside 
the container.

-- ft.h1: Inner Containers

An inner container facilitates us to set the current container as any 
inner container of a component, so that a new element can be placed inside it as it's child.

Consider this component:

-- ft.code:
lang: ftd

\-- component foo:
component: ftd.column

\--- ftd.column:
id: c1

\--- ftd.column:
id: c2

\-- foo:
id: foo-1

\-- foo:
id: foo-2

-- ft.markdown:

We have created two instances of `foo` with id as `foo-1` and `foo-2`,
and each `foo` contains two columns (or inner containers), `c1` and `c2`. 
If we wanted to place a child inside `c1` of first `foo` (i.e. one with id `foo-1`)
, we must use `foo-1.c1`:

-- ft.code:
lang: ftd

\-- container: foo-1.c1

\-- ftd.text: hello

-- ft.markdown:

This would place the element `-- ftd.text: hello` as a child inside `c1` of `foo`
with id `foo-1`. For more example, visit this [link](inner-container/)
