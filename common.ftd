-- import: ft
-- import: config


-- ft.doc-page:
toc: $ft.toc


-- ftd.column:
id: outer


-- ft.h0: Common Attributes

These attributes are available to all `ftd` "kernel" components.


-- ft.h1: `cursor: String`

You can set the cursor to be shown over any element by using `cursor` attribute:


-- ftd.row:
width: fill
border-width: 5
border-color: yellow
padding: 10
cursor: pointer


-- ftd.text: this row has pointer as cursor
align: center
width: fill


-- container: outer


-- ft.code:
lang: ftd

\-- ftd.row:
width: fill
border-width: 5
border-color: yellow
padding: 10
cursor: pointer


\-- ftd.text: this row has pointer as cursor
align: center
width: fill


-- ft.markdown:

We support the same format as [CSS cursor](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor).


-- ft.h1: `link: String`

This converts the element to a hyper link.


-- ft.code:
lang: ftd

\-- ftd.text: google
link: https://www.google.com


-- ft.markdown:

This will render like this:


-- ftd.text: google
link: https://www.google.com


-- ft.h1: `open-in-new-tab: bool, default=False`

If `link` is provided, this attribute can also be set to open the link in new
tab instead of current tab.


-- ft.code:
lang: ftd

\-- ftd.text: google
link: https://www.google.com
open-in-new-tab: true


-- ft.markdown:

Which will render like this:


-- ftd.text: google (opens in new tab)
link: https://www.google.com
open-in-new-tab: true


-- ft.h1: `submit: Option<String>`

If `submit` is passed, clicking on it issues a POST request on the provided URL.


-- ft.code:
lang: ftd

\-- ftd.text: test post
submit: https://httpbin.org/post?x=10


-- ft.markdown:

Renders as:


-- ftd.text: test post
submit: https://httpbin.org/post?x=10


-- ft.markdown:

Note: Be careful about CSRF when using this feature. If the URL is dynamically 
generated, include some CSRF token for example.

Note: both `link` and `submit` can not be provided.


-- ft.h1: `region`

This is the [ARIA Region](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques#landmark_roles)
role that UI element is playing. Valid values are:


-- ft.h2: `h0`, `h1`, till `h7`


-- ft.code:
lang: ftd

\-- ftd.text: hello
region: h1


-- ft.markdown:

This tells this is a heading with the given level.


-- ft.h1: `border-width`

Use this property to specify the width of the border. By default the `border-width`
is zero, and is not visible.


-- ft.code: specifying border width
lang: ftd

\-- ftd.text: hello
border-width: 1


-- ft.markdown:

We can also set border of individual edges.


-- ft.h1: `background-gradient`

To add gradient please use the below gradient properties.


-- ft.h2: `gradient-direction:  Direction`

Below are the supported Direction type

- bottom to top
- top to bottom
- left to right
- right to left
- bottom-right to top-left
- bottom-left to top-right
- top-right to bottom-left
- top-left to bottom-right
- center
- angle Integer


-- ft.h2: `gradient-colors: List Color`


-- ft.h3: Code sample.


-- ft.code: Left to right gradient
lang: ftd

\-- ftd.row:
width: 400
height: 200
gradient-direction: left to right
gradient-colors: red , blue


-- ft.output:


-- ftd.row:
width: 400
height: 200
gradient-direction: left to right
gradient-colors: red , blue


-- container: outer


-- ft.markdown:

You can also make a gradient diagonally. 
Following example shows a gradient that starts at bottom left and goes to 
top right.


-- ft.code: Diagonal Gradient
lang: ftd

\-- ftd.row:
width: 400
height: 200
gradient-direction: bottom-left to top-right
gradient-colors: yellow, organge


-- ft.output:


-- ftd.row:
width: 400
height: 200
gradient-direction: bottom-left to top-right
gradient-colors: yellow, orange


-- container: outer


-- ft.markdown:

Gradient with multiple colors


-- ft.code: Multiple colors.
lang: ftd

\-- ftd.row:
width: 400
height: 200
gradient-direction: left to right
gradient-colors: red, green, blue, yellow, black


-- ft.output:


-- ftd.row:
width: 400
height: 200
gradient-direction: left to right
gradient-colors: red, green, blue, yellow, black


-- container: outer


-- ft.markdown:

Radial gradient that starts from the centre.


-- ft.code: Radial gradient
lang: ftd

\-- ftd.row:
width: 400
height: 200
gradient-direction: center
gradient-colors: red, green


-- ft.output:


-- ftd.row:
width: 400
height: 200
gradient-direction: center
gradient-colors: red, green


-- container: outer


-- ft.markdown:

For more control you can use angle instead of the pre-defined directions.
A value of 0deg is equivalent to "bottom to top". A value of 90deg is equivalent 
to "left to right". A value of 180deg is equivalent to "top to bottom".


-- ft.code: With Angle
lang: ftd

\-- ftd.row:
width: 400
height: 200
gradient-direction: angle 90
gradient-colors: red, green


-- ft.output:


-- ftd.row:
width: 400
height: 200
gradient-direction: angle 90
gradient-colors: red, green


-- container: outer


-- ft.markdown:

More examples with angle


-- ft.code: With 45deg Angle
lang: ftd

\-- ftd.row:
width: 400
height: 200
gradient-direction: angle 45
gradient-colors: red, green


-- ft.output:


-- ftd.row:
width: 400
height: 200
gradient-direction: angle 45
gradient-colors: red, green


-- container: outer


-- ft.h1: `background-image: String`

`background-image` accepts a url as the value. Use this property to make an image 
as background of a container.


-- ft.code: Container with background image
lang: ftd

\-- ftd.row:
width: fill
height: 300
background-image: https://imgur.com/oCHWQQF.jpg

\-- ftd.text: Sample Text
size: 30
align: center
color: white


-- ft.output:


-- ftd.row:
width: fill
height: 300
background-image: https://imgur.com/oCHWQQF.jpg


-- ftd.text: Sample Text
size: 30
align: center
color: white
width: fill
height: fill


-- container: outer


-- ft.h1: `background-repeat: boolean`

If you are using background-image property, you can also background-repeat
property to true to repeat the image until the container is filled.

This property is usually helpful when you have a small image of a pattern you
want to fill the container with that pattern.


-- ft.code: background image with background-repeat
lang: ftd

\-- ftd.row:
width: fill
height: 300
background-image: https://imgur.com/LnJ4ziC.png
background-repeat: true


\-- ftd.text: Sample Text
size: 30
align: center
color: white
width: fill
height: fill


-- ft.output:


-- ftd.row:
width: fill
height: 300
background-image: https://imgur.com/LnJ4ziC.png
background-repeat: true


-- ftd.text: Sample Text
size: 30
align: center
color: white
width: fill
height: fill


-- container: outer


-- ft.h1: `background-parallax: boolean`

To achieve parallax effect on your container. Make `background-parallax` property
to true.


-- ft.code: Container with parallax effect
lang: ftd

\-- ftd.row:
width: fill
height: 300
background-image: https://imgur.com/oCHWQQF.jpg
background-parallax: true

\-- ftd.text: Sample Text
size: 30
align: center
color: white


-- ft.output:


-- ftd.row:
width: fill
height: 300
background-image: https://imgur.com/oCHWQQF.jpg
background-parallax: true


-- ftd.text: Sample Text
size: 30
align: center
color: white
width: fill
height: fill
